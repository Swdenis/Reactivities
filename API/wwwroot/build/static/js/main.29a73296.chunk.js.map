{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","console","log","store","commonStore","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","category","description","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","setActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","getActivity","loadActivity","runInAction","setLoadingInitial","loadActivities","axiosParams","result","setPagination","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","URLSearchParams","toString","toISOString","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","loadUserActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","UserStore","creds","setToken","modalStore","closeModal","logout","removeItem","getUser","appLoaded","setApploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","Link","avatar","spaced","Dropdown","pointing","text","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ProfileCard","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","marginBotton","LoadingComponents","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","postition","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","positivie","ProfileAbout","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","disbaled","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handlePhotoDelete","render","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDetails","ActivityDashboard","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.29a73296.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number,\n    itemsPerPage: number,\n    totalItems: number,\n    totalPages: number\n}\n\nexport class PaginatedResult<T> {\n    data: T\n    pagination: Pagination\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data\n        this.pagination = pagination\n    }\n}\n\nexport class PagingParams {\n    pageNumber\n    pageSize\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber\n        this.pageSize = pageSize \n    }\n\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\nimport { toast } from 'react-toastify'\nimport { history } from '../..'\nimport { Activity, ActivityFormValues } from '../models/activity'\nimport { PaginatedResult } from '../models/pagination'\nimport { Photo, Profile, UserActivity } from '../models/profile'\nimport { User, UserFormValues } from '../models/user'\nimport { store } from '../stores/store'\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\naxios.interceptors.request.use(config=> {\n    const token = window.localStorage.getItem('jwt')\n    if(token) config.headers.Authorization = `Bearer ${token}`\n    return config\n})\n\naxios.interceptors.response.use(async response=> {\n   if(process.env.NODE_ENV === 'development') await sleep(1000)\n    const pagination = response.headers['pagination']\n    if(pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination))\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response\n    },(error: AxiosError) => {\n    const {data, status, config} = error.response!\n    switch(status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data)}\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found')\n            }\n            if(data.errors) {\n                const modalStateErrors = []\n                for(const key in data.errors) {\n                    if(data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat()\n            }\n            break\n        case 401:\n            toast.error('Unauthorized')\n            break\n        case 404:\n            history.push('/not-found')\n            break\n        case 500:\n            console.log(data)\n            store.commonStore.setServerError(data)\n            history.push('/server-error')\n            break\n    }\n    return Promise.reject(error)\n})\n\nconst responseBody= <T> (response: AxiosResponse<T>) => response.data\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string)=> requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string )=> requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n}\n\nconst Profiles ={\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData()\n        formData.append('File', file)\n        return axios.post<Photo>('photos', formData,{\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`,{}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`,{}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { act } from \"@testing-library/react\";\nimport { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string,\n    title: string,\n    date: Date | null,\n    category: string,\n    description: string,\n    city: string,\n    venue: string,\n    hostUsername: string,\n    isCancelled: boolean,\n    attendees: Profile[],\n    host?: Profile,\n    isGoing: boolean,\n    isHost: boolean,\n  }\n\nexport class Activity implements Activity\n{\n    constructor(init?: ActivityFormValues)\n    {\n      Object.assign(this,init)\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string= undefined\n    title: string = ''\n    date: Date | null = null\n    category: string = ''\n    description: string = ''\n    city: string = ''\n    venue: string = ''\n    \n    constructor(activity?: ActivityFormValues)\n    {\n      if(activity) {\n        this.id = activity.id\n        this.title = activity.title\n        this.date = activity.date\n        this.city = activity.city\n        this.venue = activity.venue\n        this.category = activity.category\n        this.description =  activity.description\n      }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string,\n    displayName: string,\n    bio?: string,\n    image?: string,\n    photos?: Photo[],\n    followersCount: number,\n    followingCount: number,\n    following: boolean\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username\n        this.displayName = user.displayName\n        this.image = user.image\n    }\n}\n\nexport interface Photo {\n    id: string,\n    url: string,\n    isMain: boolean\n}\n\nexport interface UserActivity {\n    id: string,\n    title: string,\n    category: string,\n    date: Date,\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination,PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore{\n    activityRegistry = new Map<string, Activity>()\n    selectedActivity: Activity | undefined = undefined\n    editMode : boolean = false\n    loading: boolean = false\n    loadingInitial: boolean = false\n    pagination: Pagination | null = null\n    pagingParams: PagingParams  = new PagingParams()\n    predicate = new Map().set('all',true)\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(()=> this.predicate.keys(),\n        ()=> {\n            this.pagingParams = new PagingParams()\n            this.activityRegistry.clear()\n            this.loadActivities()\n        }\n        )\n    }\n    \n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value,key) => {\n                if (key!== 'startDate') this.predicate.delete(key)\n            })\n        }\n        switch(predicate) {\n            case 'all':\n                resetPredicate()\n                this.predicate.set('all',true)\n                break\n            case 'isGoing':\n                resetPredicate()\n                this.predicate.set('isGoing',true)\n                break\n            case 'isHost':\n                resetPredicate()\n                this.predicate.set('isHost',true)\n                break\n            case 'startDate':\n                this.predicate.delete('startDate')\n                this.predicate.set('startDate', value)\n        }\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime()-b.date!.getTime())\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams()\n        params.append('pageNumber', this.pagingParams.pageNumber.toString())\n        params.append('pageSize', this.pagingParams.pageSize.toString())\n        this.predicate.forEach((value,key) => {if (key === 'startDate') {\n            params.append(key, (value as Date).toISOString())\n        } else {\n            params.append(key, value)\n        }\n        })\n        return params\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities,activity)=>{ \n                const date = format(activity.date!, 'dd MMM yyyy')\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\n                return activities\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user\n        if(user) {\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username)\n            activity.isHost = activity.hostUsername === user.username\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\n        }\n        activity.date = new Date(activity.date!)\n        this.activityRegistry.set(activity.id,activity)\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id)\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id)\n        if (activity) {\n            this.selectedActivity = activity\n            return activity\n        } else {\n            this.loadingInitial = true\n        try {\n            activity = await agent.Activities.details(id)\n            this.setActivity(activity)\n            runInAction(()=> {\n                this.selectedActivity = activity\n            })\n            this.setLoadingInitial(false)\n            return activity\n        }\n        catch(error) {\n            console.log(error)\n            this.setLoadingInitial(false)\n        }\n    }\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true\n        try {\n            const result = await agent.Activities.list(this.axiosParams)\n                result.data.forEach(activity => {\n                this.setActivity(activity)\n                    \n            }   \n            )\n            this.setPagination(result.pagination)\n            this.setLoadingInitial(false)\n        }\n        catch (error) {\n            console.log(error)\n            this.setLoadingInitial(false)\n            \n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    ///This code was used to display form and details on a single page\n    // setSelectedActivity = (id: string) => {\n    //     this.selectedActivity = this.activityRegistry.get(id)\n    // }\n\n    // cancelSelectedActivity = () => {\n    //     this.selectedActivity = undefined\n    // }\n\n    // openForm = (id?: string) => {\n    //     id ? this.setSelectedActivity(id) : this.cancelSelectedActivity()\n    //     this.editMode = true\n    // }\n\n    // closeForm = () => {\n    //     this.editMode = false;\n    // }\n    ///\n    \n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user\n        const attendee = new Profile(user!)\n        try {\n            await agent.Activities.create(activity)\n            const newActivity = new Activity(activity)\n            newActivity.hostUsername = user!.username\n            newActivity.attendees = [attendee]\n            this.setActivity(newActivity)\n            runInAction(()=>{\n                this.selectedActivity = newActivity\n            }) \n        }\n        catch(error) {\n            console.log(error)\n            runInAction(()=>{\n                this.loading = false;\n            })\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity)\n            runInAction(()=>{\n                if(activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id,updatedActivity as Activity) \n                    this.selectedActivity = updatedActivity as Activity\n                }\n            }) \n        }\n        catch(error) {\n            console.log(error)\n            runInAction(()=>{\n                this.loading = false;\n            })\n        }\n    }\n\n        deleteActivity = async (id: string) => {\n            this.loading = false\n            try {\n                await agent.Activities.delete(id)\n                runInAction(()=>{\n                    this.activityRegistry.delete(id)\n                    ///Check whether an activity is selected, no need for this with routing\n                    //if( this.selectedActivity?.id === id) this.cancelSelectedActivity()\n                    this.loading = false;\n                }    \n                )\n            }\n            catch(error) {\n                console.log(error)\n                runInAction(() => {\n                    this.loading = false\n                }\n                )\n            }\n        }\n\n    updateAttendance = async() => {\n        this.loading = true\n        const user = store.userStore.user\n        try{ \n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(()=>{\n                if(this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(x=> x.username !== user?.username)\n                    this.selectedActivity.isGoing = false\n                } else {\n                    const attendee = new Profile(user!)\n                    this.selectedActivity?.attendees?.push(attendee)\n                    this.selectedActivity!.isGoing = true\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            }  \n            )\n        } catch(error) {\n            console.log(error)\n        } finally{ \n            this.loading = false\n        }\n    }\n\n    cancelActivityToggle = async ()=> {\n        this.loading = true\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(\n                ()=> {\n                    this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\n                    this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n                }\n            )\n        } catch(error) {\n            console.log(error)\n        } finally {\n            runInAction(()=>this.loading = false)\n        }\n\n    }\n\n    clearSelectedActivity = () =>\n    {\n        this.selectedActivity= undefined\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity=> {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\n                    attendee.following = !attendee.following\n                }\n            })\n        })\n    }\n        \n}\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null\n    loadingProfile = false\n    uploading = false\n    loading = false\n    followings: Profile[] = []\n    loadingFollowings = false\n    activeTab = 0\n    loadingActivities = false\n    userActivities: UserActivity[] = []\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(()=>this.activeTab,\n        activeTab=> {\n            if(activeTab === 3 || activeTab=== 4) {\n                const predicate = activeTab === 3 ? 'followers' : 'following'\n                this.loadFollowings(predicate)\n            } else {\n                this.followings = []\n            }\n        })\n    }\n\n    loadUserActivities = async (username: string, predicate?: string)=> {\n        this.loadingActivities = true\n        try{\n            const activities = await agent.Profiles.listActivities(\n                username, predicate!)\n                runInAction(()=>{\n                    this.userActivities = activities\n                    this.loadingActivities= false\n                })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loadingActivities = false)\n        }\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab\n    }\n\n    get isCurrentUser() {\n        if(store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username\n        }\n        return false\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true\n        try {\n            const profile = await agent.Profiles.get(username)\n            runInAction(()=> {\n                this.profile = profile\n                this.loadingProfile = false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(\n                ()=> {this.loadingProfile = false}\n            )\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true\n        try {\n            const response = await agent.Profiles.uploadPhoto(file)\n            const photo = response.data\n            runInAction(()=> {\n            if(this.profile) {\n                this.profile.photos?.push(photo)\n                if(photo.isMain && store.userStore.user) {\n                    store.userStore.setImage(photo.url)\n                    this.profile.image =photo.url\n                }\n            }\n            this.uploading = false\n            })\n\n        } catch(error) {\n            console.log(error)\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) =>\n    {   this.loading= true\n        try{\n            await agent.Profiles.setMainPhoto(photo.id)\n            store.userStore.setImage(photo.url)\n            runInAction(()=>{\n                if(this.profile && this.profile.photos) {\n                    this.profile.photos.find(p=> p.isMain)!.isMain = false\n                    this.profile.photos.find(p=> p.id === photo.id)!.isMain = true\n                    this.profile.image = photo.url\n                    this.loading = false\n                }\n            })\n        } catch(error) {\n            runInAction(()=>{\n                this.loading = false\n                console.log(error)\n            })\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true\n        try{\n            await agent.Profiles.deletePhoto(photo.id)\n            runInAction(()=>{\n                if(this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p=> p.id !== photo.id)\n                    this.loading = false\n                }\n            })\n        } catch(error) {\n            runInAction(()=>{\n                this.loading = false\n                console.log(error)}\n            )\n        }\n    }\n\n    updateProfile =  async (profile: Partial<Profile>) => {\n        this.loading = true \n        try{\n            await agent.Profiles.updateProfile(profile)\n            runInAction(()=>{\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName)\n                }\n                this.profile = {...this.profile, ...profile as Profile}\n                this.loading=false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=>this.loading = false)\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true\n        try {\n            await agent.Profiles.updateFollowing(username)\n            store.activityStore.updateAttendeeFollowing(username)\n            runInAction(()=>{\n                if(this.profile \n                    && this.profile.username !== store.userStore.user?.username \n                        && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\n                    this.profile.following = following\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--\n                }\n                this.followings.forEach(profile=> {\n                    if(profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++\n                        profile.following = following\n                    }\n                })\n                this.loading = false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loading = false)\n        }\n    }\n    \n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\n            runInAction(()=> {\n                this.followings = followings\n                this.loadingFollowings= false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loadingFollowings = false)\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds)\n            store.commonStore.setToken(user.token)\n            runInAction(\n                ()=>this.user=user\n            )\n            store.modalStore.closeModal()\n            history.push('/activities')\n        }\n        catch(error) {\n            throw error \n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null)\n        window.localStorage.removeItem('jwt')\n        this.user= null\n        history.push('/')\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current()\n            runInAction(()=>this.user=user)\n        } catch(error) {console.log(error)}\n    }\n\n    register = async(creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds)\n            store.commonStore.setToken(user.token)\n            runInAction(\n                ()=>this.user=user\n            )\n            store.modalStore.closeModal()\n            history.push('/activities')\n        }\n        catch(error) {\n            throw error \n        }\n    }\n\n    setImage= (image: string) => {\n        if (this.user) this.user.image = image\n    }\n\n    setDisplayName = (displayName: string) => {\n        if (this.user) this.user.displayName = displayName\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore,\n    commonStore: CommonStore,\n    userStore: UserStore,\n    modalStore: ModalStore,\n    profileStore: ProfileStore,\n    commentStore: CommentStore\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store)\n\nexport function useStore() {\n    return useContext(StoreContext)\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null\n    token: string | null = window.localStorage.getItem('jwt')\n    appLoaded = false \n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.token,\n            token => {\n                if(token) { window.localStorage.setItem('jwt', token)\n            } else {window.localStorage.removeItem('jwt')}\n            }\n        ) \n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token\n    }\n\n    setApploaded = () => {\n        this.appLoaded = true\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null\n} \n\nexport default class modalStore {\n    \n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true\n        this.modal.body = content\n    }\n\n    closeModal = () => {\n        this.modal.open = false\n        this.modal.body = null\n    }\n\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments : ChatComment[] = []\n\n    hubConnection: HubConnection | null = null\n\n    constructor() {\n        makeAutoObservable(this)  \n    }\n\n    createHubConnection = (activityId: string) => {\n        if(store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_CHAT_URL+'?activityId='+activityId, {\n                accessTokenFactory: () => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection.start().catch(error=> console.log(\"Error establishing connection: \", error))\n\n        this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n            runInAction(\n            ()=>{\n                comments.forEach(comment => {\n                    comment.createdAt= new Date(comment.createdAt+'Z')\n                })\n                this.comments = comments\n            }\n            )\n        })\n        this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n            runInAction(\n                ()=> {\n                    comment.createdAt= new Date(comment.createdAt)\n                    this.comments.unshift(comment)}\n            )\n        })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error=>console.log(\"Error stopping connection: \", error))\n    }\n\n    clearComments = () => {\n        this.comments = []\n        this.stopHubConnection()\n    }\n\n    addComment = async (values: any) =>  {\n        values.activityId = store.activityStore.selectedActivity?.id\n        try{\n            await this.hubConnection?.invoke('SendComment', values)\n        }\n        catch(error){\n            console.log(error)\n        }\n    }\n}","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { Menu,Container, Button,Image, Dropdown } from 'semantic-ui-react'\nimport { useStore } from '../stores/store'\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore()\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n            <Menu.Item as={NavLink} exact to='/' header>\n                <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:'10px'}} />\n                Reactivities\n            </Menu.Item>\n            <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\n            <Menu.Item>\n                <Button as={NavLink} to='/createActivity' positive content=\"Create activity\" />\n            </Menu.Item>\n            <Menu.Item position='right'>\n                <Image as={Link} to={`/profiles/${user?.username}`} src={user?.image || '/assets/user.png'} avatar spaced='right'/>\n                <Dropdown pointing='top left' text={user?.displayName}>\n                    <Dropdown.Menu>\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate} } = useStore()\n    return(\n        <>\n        <Menu vertical size='large' style={{width:'100%', marginTop: 26}}>\n            <Header icon='filter' attached color='teal' content='Filters'/>\n            <Menu.Item \n                content='All Activities'\n                active={predicate.has('all')}\n                onClick={()=> setPredicate('all','true')}\n            />\n            <Menu.Item\n            content=\"I'm going\"\n            active={predicate.has('isGoing')}\n            onClick={()=> setPredicate('isGoing','true')}\n            />\n            <Menu.Item \n            content=\"I'm hosting\"\n            active={predicate.has('isHost')}\n            onClick={()=> setPredicate('isHost','true')}\n            />\n        </Menu>\n        <Header />\n        <Calendar\n        onChange={(date)=> setPredicate('startDate', date as Date)}\n        value={predicate.get('startDate' || new Date())}\n        />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n\n    const {profileStore, userStore} = useStore()\n    const {updateFollowing, loading} = profileStore\n\n    if(userStore.user?.username === profile.username) return null\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault()\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\n    }\n\n    return(\n        \n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button color='teal' fluid content={profile.following ? 'Following' : 'Not following'}/>\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                color={profile.following ? 'red' : 'green'} \n                fluid \n                basic\n                content={profile.following ? 'Unfollow' : 'Follow'}\n                loading={loading}\n                onClick={(e) => handleFollow(e,profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from \"mobx-react-lite\"\nimport { Card, Image,Icon } from \"semantic-ui-react\"\nimport { Profile } from \"../../app/models/profile\"\nimport React from 'react'\nimport { Link } from \"react-router-dom\"\nimport FollowButton from \"./FollowButton\"\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileCrad({profile}: Props) {\n\n    function truncate(str: string | undefined) {\n        if(str) {\n            return str.length > 40 ? str.substring(0,37)+'...' : str\n        }\n    }\n\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'}/>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    ) \n})"," import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { List, Image, Popup } from 'semantic-ui-react'\nimport { Profile } from '../../../app/models/profile'\nimport ProfileCard from '../../profiles/ProfileCard'\n\ninterface Props {\n    attendees: Profile[]\n}\n\n export default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return(\n        <List horizontal>\n            {\n                attendees.map(attendee=>\n                    <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                    <Image \n                    size='mini'\n                    circular\n                    src={attendee.image || '/assets/user.png'}\n                    bordered\n                    style={attendee.following ? styles : null}\n                    />\n                    </List.Item>\n                    }\n                    >\n                        <Popup.Content>\n                            <ProfileCard profile = {attendee} />\n                        </Popup.Content>\n                    </Popup>\n                )\n            }\n        </List>\n    )\n })","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Icon, Item, Label, Popup, Segment } from 'semantic-ui-react'\nimport { Activity } from '../../../app/models/activity'\nimport {format} from 'date-fns'\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\nimport { act } from 'react-dom/test-utils'\nimport ProfileCard from '../../profiles/ProfileCard'\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && (\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign: 'center'}} />\n                )}\n                <Item.Group>\n                    <Item>\n                        <Popup\n                        trigger={\n                        <Item.Image\n                        as={Link}\n                        to={`/profiles/${activity.hostUsername}`}\n                        style={{marginBottom: 3}} \n                        size='tiny' \n                        circular\n                        src={activity.host?.image || '/assets/user.png'}\n                        />}\n                        >\n                            <Popup.Content>\n                            <ProfileCard profile = {activity.host!} />\n                            </Popup.Content>\n                        </Popup>\n                        <Item.Content>\n                            <Item.Header \n                            as={Link} \n                            to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                                {\n                                    activity.isHost && (\n                                        <Item.Description>\n                                            <Label\n                                            basic\n                                            color='orange'\n                                            >\n                                                You are hosting this activity\n                                            </Label>\n                                        </Item.Description>\n                                    )\n                                }\n                                {\n                                    activity.isGoing && !activity.isHost && (\n                                        <Item.Description>\n                                            <Label\n                                            basic\n                                            color='green'\n                                            >\n                                                You are going to this activity\n                                            </Label>\n                                        </Item.Description>\n                                    )\n                                }\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                <Icon name='marker'/> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                as={Link}\n                to={`/activities/${activity.id}`}\n                color='teal'\n                floated='right'\n                content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react' \nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const {activityStore} = useStore()\n    const {groupedActivities} = activityStore\n\n    \n    return(\n        <>\n        {groupedActivities.map(([group, activities])=>\n        <Fragment key={group}>\n            <Header sub color='teal'>\n                {group}\n            </Header>\n                {activities.map((activity)=> (\n                <ActivityListItem key={activity.id} activity={activity} />   \n                ))}\n        </Fragment>\n        )}\n        </>\n    )\n}\n)","import React, { Fragment } from 'react'\nimport { Segment, Button, Placeholder } from 'semantic-ui-react'\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport React, { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { Grid, Loader } from 'semantic-ui-react'\nimport { PagingParams } from '../../../app/models/pagination'\nimport { useStore } from '../../../app/stores/store'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityList from './ActivityList'\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\n\nexport default observer(function ActivityDashboard() {\n\n    const {activityStore} = useStore()\n    const {loadActivities, activityRegistry, pagination, setPagingParams} = activityStore\n    const [loadingNext, setLoadingNext] = useState(false)\n\n    function handleGetNext() {\n        setLoadingNext(true)\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\n        loadActivities().then(()=> setLoadingNext(false))\n    }\n\n\n    useEffect(()=>{\n        if(activityRegistry.size <= 1) loadActivities()},[activityRegistry.size, loadActivities])\n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ?(\n                    <>\n                    <ActivityListItemPlaceholder />\n                    <ActivityListItemPlaceholder />\n                    </>\n                ) : \n                (\n                    <InfiniteScroll\n                    pageStart={0}\n                    loadMore={handleGetNext}\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                    initialLoad={false}\n                    >\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )\n                }\n            </Grid.Column>\n            <Grid.Column width='6'>\n                < ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width='10'>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n)\n","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header, Label } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore()\n    const {login} = userStore\n\n    return(\n        <Formik\n        initialValues={{email:'', password:'', error: null}}\n        onSubmit={(values,{setErrors})=> login(values).catch(error=> \n        setErrors({error: 'Invalid email or password'}))}>\n            {({handleSubmit, isSubmitting, errors})=> (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                <Header as='h2' color='teal' textAlign='center' content='Login to Reactivities' />\n                <MyTextInput name='email' placeholder='Email' />\n                <MyTextInput name= 'password' placeholder='Password' type='password' />\n                <ErrorMessage name='error'>\n                    {() =>\n                    (<Label style={{marginBottom: 10}} basic color='red' content={errors.error}\n                    />\n                    )}\n                </ErrorMessage>\n                <Button loading={isSubmitting} positive type='submit' fluid content='login' />\n            </Form>\n            )}    \n        </Formik>\n    )\n})\n","import React from 'react'\nimport { Message } from 'semantic-ui-react'\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return(\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any)=>(\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport ValidationErrors from '../errors/ValidationErrors'\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore()\n    const {register} = userStore\n\n    return(\n        <Formik\n        initialValues={{displayName: '', username: '', email:'', password:'', error: null}}\n        validationSchema={Yup.object(\n            {\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            }\n        )}\n        onSubmit={(values,{setErrors})=> register(values).catch(error=> \n        setErrors({error}))}>\n            {({handleSubmit, isSubmitting, errors, isValid, dirty})=> (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                <Header as='h2' color='teal' textAlign='center' content='Sign up to Reactivities' />\n                <MyTextInput name='displayName' placeholder='Display Name' />\n                <MyTextInput name='username' placeholder=' Username' />\n                <MyTextInput name='email' placeholder='Email' />\n                <MyTextInput name= 'password' placeholder='Password' type='password' />\n                <ErrorMessage name='error'>\n                    {() =>\n                    (<ValidationErrors errors={errors.error} />\n                    )}\n                </ErrorMessage>\n                <Button disabled={!isValid || ! dirty || isSubmitting} \n                loading={isSubmitting} positive type='submit' fluid content='Register' />\n            </Form>\n            )}    \n        </Formik>\n    )\n})\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport LoginForm from '../users/LoginForm'\nimport RegisterForm from '../users/RegisterForm'\n\nexport default observer(function HomePage() {\n    const {userStore, modalStore} = useStore()\n    const {isLoggedIn} = userStore\n    return(\n        <Segment inverted textAlign='center' className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image alt='logo' size='massive' src='/assets/logo.png' style={{marginBotton: 12}}/>\n                    Reactivities\n                </Header>\n                {isLoggedIn ? \n                (\n                <>\n                <Header inverted as='h2' content=\"Welcome to Reactivities\"/>\n                <Button as={Link} to='/activities' size='huge' inverted>\n                    Take me to Activities!\n                </Button>\n                </>\n                ) :\n                (\n                <>\n                <Button onClick={()=> modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                Login\n                </Button> \n                <Button onClick={()=> modalStore.openModal(<RegisterForm /> )} size='huge' inverted>\n                Register\n                </Button> \n                </>\n                )}\n            </Container>\n        </Segment>\n    )\n})","import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\ninterface Props {\n    inverted?: boolean;\n    content?: string\n}\n\nexport default function LoadingComponents({inverted= true, content= 'Loading...'}: Props) {\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label, Select } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    options: any;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n            clearable\n            options={props.options}\n            value={field.value || null}\n            onChange={(e,d)=> helpers.setValue(d.value)}\n            onBlur={()=> helpers.setTouched(true)}\n            placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n            {...field}\n            {...props}\n            selected={(field.value && new Date(field.value)) || null}\n            onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { observer } from 'mobx-react-lite'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useHistory, useParams } from 'react-router-dom'\nimport { Button, Header, Segment } from 'semantic-ui-react'\nimport LoadingComponents from '../../../app/layout/LoadingComponents'\nimport { useStore } from '../../../app/stores/store'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport MyTextInput from '../../../app/common/form/MyTextInput'\nimport MyTextArea from '../../../app/common/form/MyTextArea'\nimport MySelectInput from '../../../app/common/form/MySelectInput'\nimport MyDateInput from '../../../app/common/form/MyDateInput'\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\nimport { Activity, ActivityFormValues } from '../../../app/models/activity'\nimport { v4 as uuid } from 'uuid';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory()\n    const {activityStore} = useStore()\n    const {loadActivity, loading, loadingInitial, createActivity, updateActivity} = activityStore\n    const {id} = useParams<{id: string}>()\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\n\n    const validationSchema= Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    })\n\n    useEffect(()=> {\n         if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))},[id, loadActivity])\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if(!activity.id) { \n            let newActivity = {\n                ...activity, \n                id: uuid()\n            }\n            createActivity(newActivity).then(()=> history.push(`/activities/${newActivity.id}`))\n            } else {\n                updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`))\n            }\n    }\n    \n    if(loadingInitial) return <LoadingComponents content='Loading activity...' />\n\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik\n            enableReinitialize\n            initialValues={activity}\n            validationSchema={validationSchema}\n            onSubmit={values => handleFormSubmit(values)}>\n            {({values: dirty, isSubmitting, handleSubmit, isValid}) => (\n            <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\n                <MyTextInput name='title' placeholder='title' />\n                <MyTextArea rows={3} placeholder='Description' name=\"description\" />\n                <MySelectInput options={categoryOptions} placeholder='Category' name=\"category\" />\n                <MyDateInput\n                placeholderText='Date'\n                name=\"date\"\n                showTimeSelect\n                timeCaption='time'\n                dateFormat='MMMM d, yyyy h:mm aa'\n                />\n                <Header content='Location Details' sub color='teal'/>\n                <MyTextInput placeholder='City' name=\"city\" />\n                <MyTextInput placeholder='Venue' name=\"venue\" />\n                <Button disabled={!dirty || isSubmitting || !isValid}\n                loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\n                <Button as={Link} to='/activities' floated='right'  type='button' content='Cancel' />\n            </Form>\n            )}\n            </Formik>\n        </Segment>\n    )\n}\n)\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n}\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n}\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore()\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding : '0'}}>\n                {activity.isCancelled && (\n                    <Label style={{postition: 'absolute', zIndex: 1000, left: -14, top: 20\n                    }} content='Cancelled' ribbon color='red' \n                    />\n                )}\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!,'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>\n                                    {activity.host?.displayName}\n                                    </Link>\n                                    </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {\n                    activity.isHost ? (     \n                    <>\n                    <Button color={activity.isCancelled ? 'green' : 'red'}\n                    floated='left'\n                    basic\n                    content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}\n                    onClick={cancelActivityToggle}\n                    loading={loading }\n                    />\n                    <Button\n                    disabled={activity.isCancelled} \n                    as={Link} to={`/manage/${activity.id}`} \n                    color='orange' floated='right'\n                    >\n                    Manage Event\n                    </Button>\n                    </>\n                    ) :\n                    activity.isGoing ? \n                    (<Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>) :\n                    (<Button disabled={activity.isCancelled} \n                        loading={loading} \n                        onClick={updateAttendance} \n                        color='teal'>\n                        Join Activity\n                        </Button>)\n                    }    \n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Button, Loader} from 'semantic-ui-react'\nimport MyTextArea from '../../../app/common/form/MyTextArea'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { relative } from 'path'\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore()\n\n    useEffect(()=> {\n        if(activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n        return ()=> commentStore.clearComments()\n    },[commentStore, activityId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n            <Formik\n                    onSubmit={(values, {resetForm})=> commentStore.addComment(values)\n                    .then(()=> resetForm())}\n                    initialValues={{body: ''}}\n                    validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        }\n                    )}\n                    >\n                        {({isSubmitting, isValid, handleSubmit})=>(\n                             <Form className='ui form'>\n                                <Field\n                                name='body'\n                                >\n                                   {(props: FieldProps)=>(\n                                       <div style={{position: 'relative'}}>\n                                           <Loader active={isSubmitting}/>\n                                           <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter to start a new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e=>{\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return\n                                                } else if(e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault()\n                                                    isValid && handleSubmit()\n                                                }\n                                            }}\n                                            />\n                                       </div>\n                                   )} \n                                </Field>\n                            </Form>\n                        )}\n                    </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment=>(\n                        <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author \n                            as={Link}\n                            to={`/profiles/${comment.username}`}\n                            >{comment.displayName}</Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                        </Comment.Content>\n                    </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'person' : 'people'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee =>\n                        (\n                            <Item style={{ position: 'relative' }} key={attendee.username}>\n                                {attendee.username === host?.username &&\n                                (\n                                    <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                    >\n                                    Host\n                                    </Label>\n                                )\n                                }\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                                </Item.Content>\n                            </Item>\n                        ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import React, { useEffect } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react'\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store'\nimport ActivityDetailedsHeader from './ActivityDetailedHeader';\nimport ActivityDetailedsInfo from './ActivityDetailedInfo';\nimport ActivityDetailedsChat from './ActivityDetailedChat';\nimport ActivityDetailedsSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity,loadActivity, loadingInitial, clearSelectedActivity} = activityStore\n    const {id} =  useParams<{id: string}>()\n\n    useEffect(()=>{\n      if (id) {\n        loadActivity(id)\n      }\n      return ()=>clearSelectedActivity()\n    }, [id, loadActivity,clearSelectedActivity])\n\n    if (loadingInitial || !activity) return <LoadingComponents />\n    \n    return(\n      <Grid>\n        <Grid.Column width={10}>\n          <ActivityDetailedsHeader activity={activity}/>\n          <ActivityDetailedsInfo activity={activity}/>\n          <ActivityDetailedsChat activityId={activity.id}/>\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <ActivityDetailedsSidebar activity={activity!}/>\n        </Grid.Column>\n      </Grid>\n  )\n}\n)","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null)\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n            <ValidationErrors errors={errors} />}\n        </>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\n\nexport default function NotFound() {\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                    Oops - we've looked everywhere and could not find this\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React from 'react' \nimport { Container, Header, Segment } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore()\n\n    return(\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n            <Segment>\n            <Header as='h4' content='Stack trace' color='teal' />\n            <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n            </Segment>}\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Modal } from 'semantic-ui-react'\nimport { useStore } from '../../stores/store'\n\nexport default observer(function ModalContainer() {\n\n    const {modalStore } = useStore()\n    const {modal,closeModal} = modalStore\n\n    return(\n        <Modal open={modal.open} onClose={closeModal} size='mini' >\n            <Modal.Content>\n                {modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n\n})","import { Formik,Form } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport MyTextArea from '../../app/common/form/MyTextArea'\nimport { Button } from 'semantic-ui-react'\n\n\ninterface Props {\n    setEditMode: (editMode: boolean)=> void\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n\n    const {profileStore: {profile, updateProfile} } = useStore()\n    return(\n        <Formik\n        initialValues ={{displayName: profile?.displayName, bio: profile?.bio}}\n        onSubmit={values=> {\n            updateProfile(values).then(()=>setEditMode(false))\n        }}\n        validationSchema={Yup.object({\n            displayName: Yup.string().required()\n        })}\n        >\n            {({isSubmitting,isValid, dirty}) => (\n                <Form className=\"ui form\">\n                    <MyTextInput placeholder='Display Name' name='displayName'/>\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\n                    <Button\n                    positivie\n                    type='submit'\n                    loading={isSubmitting}\n                    content='Update profile'\n                    floated='right'\n                    disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React, { useState } from 'react'\nimport { Button, Grid, Header,Tab } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport ProfileEditForm from './ProfileEditForm'\n\nexport default function ProfileAbout() {\n\n    const {profileStore: {isCurrentUser, profile}} = useStore()\n    const [editMode, setEditMode] = useState(false)\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                        floated='right'\n                        basic\n                        content={editMode ? 'Cancel' : 'Edit Profile'}\n                        onClick={()=>setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode = {setEditMode} /> :\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react'\nimport { UserActivity } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\nimport { format } from 'date-fns'\n\nconst panes = [\n    {menuItem: 'Future Events', pane: { key: 'future' }},\n    {menuItem: 'Past Events', pane: { key: 'past' }},\n    {menuItem: 'Hosting', pane: { key: 'hosting' }},\n]\n\nexport default observer(function ProfileActivities() {\n    const {profileStore: {loadUserActivities, profile, loadingActivities, userActivities}} = useStore()\n\n    useEffect(()=>{\n        loadUserActivities(profile!.username)\n    },[loadUserActivities, profile])\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\n    }\n\n    return(\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                    panes={panes}\n                    menu={{secondary: true, pointing: true}}\n                    onTabChange={(e,data)=> {\n                        console.log(data)\n                        handleTabChange(e,data)}}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity)=>\n                        <Card\n                        as={Link}\n                        to={`/activities/${activity.id}`}\n                        key={activity.id}\n                        >\n                            <Image \n                            src={`/assets/categoryImages/${activity.category}.jpg`}\n                            style={{minHeight: 100, objectFit: 'cover'}} />\n                            <Card.Content>\n                                <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                <Card.Meta textAlign='center'>\n                                    <div>{format(new Date(activity.date),'do LLL')}</div>\n                                    <div>{format(new Date(activity.date),'h:mm a')}</div>\n                                </Card.Meta>\n                            </Card.Content>\n                        </Card>\n                        )}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport ProfileCard from './ProfileCard'\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore()\n    const {profile, followings, loadingFollowings, activeTab} = profileStore\n\n\n    return(\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column  width={16}>\n                    <Header \n                    floated='left' \n                    icon='user' \n                    content={activeTab === 3 ? `People following ${profile?.displayName}` :\n                    `People ${profile?.displayName} is following` }\n                    />\n                </Grid.Column>\n                <Grid.Column width={16} >\n                    <Card.Group itemsPerRow={4} >\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n  setFiles: (files: any)=> void\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n  \n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200\n  }\n\n  const dzActive = {\n    borderColor: 'green'\n  }\n  const onDrop = useCallback((acceptedFiles) => {\n     setFiles(acceptedFiles.map((file: any)=> Object.assign(file, {preview: URL.createObjectURL(file)})))\n  }, [setFiles])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop image here' />\n    </div>\n  )\n}","import React from 'react'\nimport { Cropper } from 'react-cropper'\nimport 'cropperjs/dist/cropper.css' \n\ninterface Props {\n    setCropper: (cropper: Cropper) => void,\n    imagePreview: string\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) { \n    return(\n        <Cropper\n        src={imagePreview}\n        style={{height: 200, width:'100%'}}\n        initialAspectRatio={1}\n        aspectRatio={1}\n        preview='.img-preview'\n        guides={false}\n        viewMode={1}\n        autoCropArea={1}\n        background={false}\n        onInitialized={cropper=> setCropper(cropper)}\n        />\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Grid, Header } from 'semantic-ui-react'\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\nimport PhotoWidgetCropper from './PhotoWidgetCropper'\n\ninterface Props {\n    loading: boolean,\n    uploadPhoto: (file: Blob) => void\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([])\n    const [cropper, setCropper] = useState<Cropper>()\n\n    ///for debugging\n    //console.log(files)\n    function onCrop() {\n        if(cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(()=>{\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    },[files])\n\n    return(\n\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 &&\n                (\n                    <PhotoWidgetCropper\n                    setCropper={setCropper}\n                    imagePreview={files[0].preview}\n                    />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length> 0 && \n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\n                <Button.Group  widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                    <Button disbaled={loading} onClick={()=> setFiles([])} icon='close'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Card, Tab,Image,Header, Grid, Button } from 'semantic-ui-react'\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\nimport { Photo, Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({profile}: Props)\n{   const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore()\n    const [addPhotoMode, setAddPhotoMode] = useState(false)\n    const [target, setTarget] = useState('')\n    \n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(()=> setAddPhotoMode(false))\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        setMainPhoto(photo)\n    }\n\n    function handlePhotoDelete(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        deletePhoto(photo)\n    }\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                <Header icon='image' content='Photos' floated='left'/>\n                {isCurrentUser && (\n                    <Button floated='right' \n                    basic \n                    content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                    onClick={()=> setAddPhotoMode(!addPhotoMode)}\n                    />\n                )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/> )\n                        :\n                        (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser &&\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                        basic\n                                        color='green'\n                                        content='Main'\n                                        name={'main' + photo.id}\n                                        disabled={photo.isMain}\n                                        onClick={e=>handleSetMainPhoto(photo,e)}\n                                        loading={target === 'main' + photo.id && loading}\n                                        />\n                                        <Button \n                                        basic\n                                        color='red'\n                                        icon='trash'\n                                        name={photo.id}\n                                        disabled={photo.isMain}\n                                        onClick={e=>handlePhotoDelete(photo,e)}\n                                        loading={target === photo.id && loading}\n                                        />\n                                    </Button.Group>}\n                                </Card>))}      \n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n            \n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\nimport ProfileAbout from './ProfileAbout'\nimport ProfileActivities from './ProfileActivities'\nimport ProfileFollowings from './ProfileFollowings'\nimport ProfilePhotos from './ProfilePhotos'\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore() \n\n    const panes = [\n    {menuItem: 'About', render: () => <ProfileAbout/>},\n    {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n    {menuItem: 'Events', render: () => <ProfileActivities />},\n    {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n    {menuItem: 'Following', render: () => <ProfileFollowings/>},\n]\n    return(\n        <Tab\n        menu={{fluid: true, vertical: true}}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Grid, Item, Segment,Header, Statistic, Divider, Reveal, Button } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport FollowButton from './FollowButton'\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileHeader({profile}: Props)\n{\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName}/>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                <Statistic.Group>\n                    <Statistic label='Followers' value={profile.followersCount}/>\n                    <Statistic label='Following' value={profile.followingCount}/>\n                </Statistic.Group>\n                <Divider />\n                <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Grid } from 'semantic-ui-react'\nimport LoadingComponents from '../../app/layout/LoadingComponents'\nimport { useStore } from '../../app/stores/store'\nimport ProfileContent from './ProfileContent'\nimport ProfileHeader from './ProfileHeader'\n\nexport default observer(function ProfilePage() \n{   const {username} = useParams<{username: string}>()\n    const {profileStore} = useStore()\n    const {profile,loadProfile, loadingProfile,setActiveTab} = profileStore\n\n    useEffect(()=>{\n        loadProfile(username)\n        return(()=> setActiveTab(0))\n    },[loadProfile,username, setActiveTab])\n\n    if(loadingProfile) return <LoadingComponents content=\"Loading profile\" />\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                    <ProfileHeader profile={profile}/>\n                    <ProfileContent profile={profile}/>\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\"\nimport { useStore } from \"../stores/store\"\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore()\n    return(\n        <Route {...rest}\n        render={(props)=> isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container} from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponents from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation()\n\n  const {commonStore, userStore} = useStore()\n\n  useEffect(()=>{\n    if(commonStore.token) {userStore.getUser().finally(()=> commonStore.setApploaded())}\n    else {commonStore.setApploaded()}\n  }, [commonStore, userStore]) \n\n  if(!commonStore.appLoaded) return <LoadingComponents content=\"Loading app\" />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage}/>\n      <Route\n      path={'/(.+)'}\n      render={\n        ()=>(\n          <>\n          <NavBar/>\n          <Container style={{marginTop: '7em'}}>\n            <Switch>\n            <PrivateRoute exact path='/activities/:id' component={ActivityDetails}/>\n            <PrivateRoute path='/activities' component={ActivityDashboard}/>\n            <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm}/>\n            <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n            <PrivateRoute path='/errors' component={TestErrors} />\n            <Route path='/server-error' component={ServerError} />\n            <Route component={NotFound} />\n            </Switch>\n          </Container> \n          </>\n        )\n      }\n      />  \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport {createBrowserHistory} from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history = {history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","console","log","store","commonStore","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","date","category","description","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPredicate","value","resetPredicate","forEach","setPagingParams","setActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","getActivity","loadActivity","runInAction","setLoadingInitial","loadActivities","axiosParams","result","setPagination","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","b","getTime","URLSearchParams","toString","toISOString","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","loadUserActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","appLoaded","setApploaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","Link","avatar","spaced","Dropdown","pointing","text","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ProfileCard","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","marginBotton","Divider","LoadingComponents","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","postition","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","positivie","ProfileAbout","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","disbaled","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handlePhotoDelete","render","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDetails","ActivityDashboard","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.becb630e.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number,\n    itemsPerPage: number,\n    totalItems: number,\n    totalPages: number\n}\n\nexport class PaginatedResult<T> {\n    data: T\n    pagination: Pagination\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data\n        this.pagination = pagination\n    }\n}\n\nexport class PagingParams {\n    pageNumber\n    pageSize\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber\n        this.pageSize = pageSize \n    }\n\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\nimport { toast } from 'react-toastify'\nimport { history } from '../..'\nimport { Activity, ActivityFormValues } from '../models/activity'\nimport { PaginatedResult } from '../models/pagination'\nimport { Photo, Profile, UserActivity } from '../models/profile'\nimport { User, UserFormValues } from '../models/user'\nimport { store } from '../stores/store'\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\naxios.interceptors.request.use(config=> {\n    const token = window.localStorage.getItem('jwt')\n    if(token) config.headers.Authorization = `Bearer ${token}`\n    return config\n})\n\naxios.interceptors.response.use(async response=> {\n   if(process.env.NODE_ENV === 'development') await sleep(1000)\n    const pagination = response.headers['pagination']\n    if(pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination))\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response\n    },(error: AxiosError) => {\n    const {data, status, config} = error.response!\n    switch(status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data)}\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found')\n            }\n            if(data.errors) {\n                const modalStateErrors = []\n                for(const key in data.errors) {\n                    if(data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat()\n            }\n            break\n        case 401:\n            toast.error('Unauthorized')\n            break\n        case 404:\n            history.push('/not-found')\n            break\n        case 500:\n            console.log(data)\n            store.commonStore.setServerError(data)\n            history.push('/server-error')\n            break\n    }\n    return Promise.reject(error)\n})\n\nconst responseBody= <T> (response: AxiosResponse<T>) => response.data\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string)=> requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string )=> requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\n}\n\nconst Profiles ={\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData()\n        formData.append('File', file)\n        return axios.post<Photo>('photos', formData,{\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`,{}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`,{}),\n    listFollowings: (username: string, predicate: string) => \n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { act } from \"@testing-library/react\";\nimport { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string,\n    title: string,\n    date: Date | null,\n    category: string,\n    description: string,\n    city: string,\n    venue: string,\n    hostUsername: string,\n    isCancelled: boolean,\n    attendees: Profile[],\n    host?: Profile,\n    isGoing: boolean,\n    isHost: boolean,\n  }\n\nexport class Activity implements Activity\n{\n    constructor(init?: ActivityFormValues)\n    {\n      Object.assign(this,init)\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string= undefined\n    title: string = ''\n    date: Date | null = null\n    category: string = ''\n    description: string = ''\n    city: string = ''\n    venue: string = ''\n    \n    constructor(activity?: ActivityFormValues)\n    {\n      if(activity) {\n        this.id = activity.id\n        this.title = activity.title\n        this.date = activity.date\n        this.city = activity.city\n        this.venue = activity.venue\n        this.category = activity.category\n        this.description =  activity.description\n      }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string,\n    displayName: string,\n    bio?: string,\n    image?: string,\n    photos?: Photo[],\n    followersCount: number,\n    followingCount: number,\n    following: boolean\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username\n        this.displayName = user.displayName\n        this.image = user.image\n    }\n}\n\nexport interface Photo {\n    id: string,\n    url: string,\n    isMain: boolean\n}\n\nexport interface UserActivity {\n    id: string,\n    title: string,\n    category: string,\n    date: Date,\n}","import {makeAutoObservable, reaction, runInAction} from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination,PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore{\n    activityRegistry = new Map<string, Activity>()\n    selectedActivity: Activity | undefined = undefined\n    editMode : boolean = false\n    loading: boolean = false\n    loadingInitial: boolean = false\n    pagination: Pagination | null = null\n    pagingParams: PagingParams  = new PagingParams()\n    predicate = new Map().set('all',true)\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(()=> this.predicate.keys(),\n        ()=> {\n            this.pagingParams = new PagingParams()\n            this.activityRegistry.clear()\n            this.loadActivities()\n        }\n        )\n    }\n    \n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value,key) => {\n                if (key!== 'startDate') this.predicate.delete(key)\n            })\n        }\n        switch(predicate) {\n            case 'all':\n                resetPredicate()\n                this.predicate.set('all',true)\n                break\n            case 'isGoing':\n                resetPredicate()\n                this.predicate.set('isGoing',true)\n                break\n            case 'isHost':\n                resetPredicate()\n                this.predicate.set('isHost',true)\n                break\n            case 'startDate':\n                this.predicate.delete('startDate')\n                this.predicate.set('startDate', value)\n        }\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a,b)=> a.date!.getTime()-b.date!.getTime())\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams()\n        params.append('pageNumber', this.pagingParams.pageNumber.toString())\n        params.append('pageSize', this.pagingParams.pageSize.toString())\n        this.predicate.forEach((value,key) => {if (key === 'startDate') {\n            params.append(key, (value as Date).toISOString())\n        } else {\n            params.append(key, value)\n        }\n        })\n        return params\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities,activity)=>{ \n                const date = format(activity.date!, 'dd MMM yyyy')\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\n                return activities\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user\n        if(user) {\n            activity.isGoing = activity.attendees!.some(a => a.username === user.username)\n            activity.isHost = activity.hostUsername === user.username\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername)\n        }\n        activity.date = new Date(activity.date!)\n        this.activityRegistry.set(activity.id,activity)\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id)\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id)\n        if (activity) {\n            this.selectedActivity = activity\n            return activity\n        } else {\n            this.loadingInitial = true\n        try {\n            activity = await agent.Activities.details(id)\n            this.setActivity(activity)\n            runInAction(()=> {\n                this.selectedActivity = activity\n            })\n            this.setLoadingInitial(false)\n            return activity\n        }\n        catch(error) {\n            console.log(error)\n            this.setLoadingInitial(false)\n        }\n    }\n    }\n\n    loadActivities = async () => {\n        this.loadingInitial = true\n        try {\n            const result = await agent.Activities.list(this.axiosParams)\n                result.data.forEach(activity => {\n                this.setActivity(activity)\n                    \n            }   \n            )\n            this.setPagination(result.pagination)\n            this.setLoadingInitial(false)\n        }\n        catch (error) {\n            console.log(error)\n            this.setLoadingInitial(false)\n            \n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    ///This code was used to display form and details on a single page\n    // setSelectedActivity = (id: string) => {\n    //     this.selectedActivity = this.activityRegistry.get(id)\n    // }\n\n    // cancelSelectedActivity = () => {\n    //     this.selectedActivity = undefined\n    // }\n\n    // openForm = (id?: string) => {\n    //     id ? this.setSelectedActivity(id) : this.cancelSelectedActivity()\n    //     this.editMode = true\n    // }\n\n    // closeForm = () => {\n    //     this.editMode = false;\n    // }\n    ///\n    \n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user\n        const attendee = new Profile(user!)\n        try {\n            await agent.Activities.create(activity)\n            const newActivity = new Activity(activity)\n            newActivity.hostUsername = user!.username\n            newActivity.attendees = [attendee]\n            this.setActivity(newActivity)\n            runInAction(()=>{\n                this.selectedActivity = newActivity\n            }) \n        }\n        catch(error) {\n            console.log(error)\n            runInAction(()=>{\n                this.loading = false;\n            })\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity)\n            runInAction(()=>{\n                if(activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id,updatedActivity as Activity) \n                    this.selectedActivity = updatedActivity as Activity\n                }\n            }) \n        }\n        catch(error) {\n            console.log(error)\n            runInAction(()=>{\n                this.loading = false;\n            })\n        }\n    }\n\n        deleteActivity = async (id: string) => {\n            this.loading = false\n            try {\n                await agent.Activities.delete(id)\n                runInAction(()=>{\n                    this.activityRegistry.delete(id)\n                    ///Check whether an activity is selected, no need for this with routing\n                    //if( this.selectedActivity?.id === id) this.cancelSelectedActivity()\n                    this.loading = false;\n                }    \n                )\n            }\n            catch(error) {\n                console.log(error)\n                runInAction(() => {\n                    this.loading = false\n                }\n                )\n            }\n        }\n\n    updateAttendance = async() => {\n        this.loading = true\n        const user = store.userStore.user\n        try{ \n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(()=>{\n                if(this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(x=> x.username !== user?.username)\n                    this.selectedActivity.isGoing = false\n                } else {\n                    const attendee = new Profile(user!)\n                    this.selectedActivity?.attendees?.push(attendee)\n                    this.selectedActivity!.isGoing = true\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            }  \n            )\n        } catch(error) {\n            console.log(error)\n        } finally{ \n            this.loading = false\n        }\n    }\n\n    cancelActivityToggle = async ()=> {\n        this.loading = true\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(\n                ()=> {\n                    this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled\n                    this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n                }\n            )\n        } catch(error) {\n            console.log(error)\n        } finally {\n            runInAction(()=>this.loading = false)\n        }\n\n    }\n\n    clearSelectedActivity = () =>\n    {\n        this.selectedActivity= undefined\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity=> {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\n                    attendee.following = !attendee.following\n                }\n            })\n        })\n    }\n        \n}\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null\n    loadingProfile = false\n    uploading = false\n    loading = false\n    followings: Profile[] = []\n    loadingFollowings = false\n    activeTab = 0\n    loadingActivities = false\n    userActivities: UserActivity[] = []\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(()=>this.activeTab,\n        activeTab=> {\n            if(activeTab === 3 || activeTab=== 4) {\n                const predicate = activeTab === 3 ? 'followers' : 'following'\n                this.loadFollowings(predicate)\n            } else {\n                this.followings = []\n            }\n        })\n    }\n\n    loadUserActivities = async (username: string, predicate?: string)=> {\n        this.loadingActivities = true\n        try{\n            const activities = await agent.Profiles.listActivities(\n                username, predicate!)\n                runInAction(()=>{\n                    this.userActivities = activities\n                    this.loadingActivities= false\n                })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loadingActivities = false)\n        }\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab\n    }\n\n    get isCurrentUser() {\n        if(store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username\n        }\n        return false\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true\n        try {\n            const profile = await agent.Profiles.get(username)\n            runInAction(()=> {\n                this.profile = profile\n                this.loadingProfile = false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(\n                ()=> {this.loadingProfile = false}\n            )\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true\n        try {\n            const response = await agent.Profiles.uploadPhoto(file)\n            const photo = response.data\n            runInAction(()=> {\n            if(this.profile) {\n                this.profile.photos?.push(photo)\n                if(photo.isMain && store.userStore.user) {\n                    store.userStore.setImage(photo.url)\n                    this.profile.image =photo.url\n                }\n            }\n            this.uploading = false\n            })\n\n        } catch(error) {\n            console.log(error)\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) =>\n    {   this.loading= true\n        try{\n            await agent.Profiles.setMainPhoto(photo.id)\n            store.userStore.setImage(photo.url)\n            runInAction(()=>{\n                if(this.profile && this.profile.photos) {\n                    this.profile.photos.find(p=> p.isMain)!.isMain = false\n                    this.profile.photos.find(p=> p.id === photo.id)!.isMain = true\n                    this.profile.image = photo.url\n                    this.loading = false\n                }\n            })\n        } catch(error) {\n            runInAction(()=>{\n                this.loading = false\n                console.log(error)\n            })\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true\n        try{\n            await agent.Profiles.deletePhoto(photo.id)\n            runInAction(()=>{\n                if(this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p=> p.id !== photo.id)\n                    this.loading = false\n                }\n            })\n        } catch(error) {\n            runInAction(()=>{\n                this.loading = false\n                console.log(error)}\n            )\n        }\n    }\n\n    updateProfile =  async (profile: Partial<Profile>) => {\n        this.loading = true \n        try{\n            await agent.Profiles.updateProfile(profile)\n            runInAction(()=>{\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName)\n                }\n                this.profile = {...this.profile, ...profile as Profile}\n                this.loading=false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=>this.loading = false)\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true\n        try {\n            await agent.Profiles.updateFollowing(username)\n            store.activityStore.updateAttendeeFollowing(username)\n            runInAction(()=>{\n                if(this.profile \n                    && this.profile.username !== store.userStore.user?.username \n                        && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\n                    this.profile.following = following\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--\n                }\n                this.followings.forEach(profile=> {\n                    if(profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++\n                        profile.following = following\n                    }\n                })\n                this.loading = false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loading = false)\n        }\n    }\n    \n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate)\n            runInAction(()=> {\n                this.followings = followings\n                this.loadingFollowings= false\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(()=> this.loadingFollowings = false)\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null\n    fbAccessToken: string | null = null\n    fbLoading = false\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds)\n            store.commonStore.setToken(user.token)\n            runInAction(\n                ()=>this.user=user\n            )\n            store.modalStore.closeModal()\n            history.push('/activities')\n        }\n        catch(error) {\n            throw error \n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null)\n        window.localStorage.removeItem('jwt')\n        this.user= null\n        history.push('/')\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current()\n            runInAction(()=>this.user=user)\n        } catch(error) {console.log(error)}\n    }\n\n    register = async(creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds)\n            store.commonStore.setToken(user.token)\n            runInAction(\n                ()=>this.user=user\n            )\n            store.modalStore.closeModal()\n            history.push('/activities')\n        }\n        catch(error) {\n            throw error \n        }\n    }\n\n    setImage= (image: string) => {\n        if (this.user) this.user.image = image\n    }\n\n    setDisplayName = (displayName: string) => {\n        if (this.user) this.user.displayName = displayName\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if (response.status === 'connected') {\n                this.fbAccessToken = response.authResponse.accessToken;\n            }\n        })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user=> {\n                store.commonStore.setToken(user.token)\n                runInAction(()=>{\n                    this.user = user\n                    this.fbLoading = false\n                })\n                history.push('/activities')\n\n            }).catch(error => {\n                console.log(error)\n                runInAction(()=> this.fbLoading = false)\n            })\n        }\n        if (this.fbAccessToken) {\n            apiLogin(this.fbAccessToken)\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken)\n            }, {scope: 'public_profile,email'})\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore,\n    commonStore: CommonStore,\n    userStore: UserStore,\n    modalStore: ModalStore,\n    profileStore: ProfileStore,\n    commentStore: CommentStore\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store)\n\nexport function useStore() {\n    return useContext(StoreContext)\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null\n    token: string | null = window.localStorage.getItem('jwt')\n    appLoaded = false \n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.token,\n            token => {\n                if(token) { window.localStorage.setItem('jwt', token)\n            } else {window.localStorage.removeItem('jwt')}\n            }\n        ) \n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token\n    }\n\n    setApploaded = () => {\n        this.appLoaded = true\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null\n} \n\nexport default class modalStore {\n    \n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true\n        this.modal.body = content\n    }\n\n    closeModal = () => {\n        this.modal.open = false\n        this.modal.body = null\n    }\n\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments : ChatComment[] = []\n\n    hubConnection: HubConnection | null = null\n\n    constructor() {\n        makeAutoObservable(this)  \n    }\n\n    createHubConnection = (activityId: string) => {\n        if(store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_CHAT_URL+'?activityId='+activityId, {\n                accessTokenFactory: () => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n        this.hubConnection.start().catch(error=> console.log(\"Error establishing connection: \", error))\n\n        this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n            runInAction(\n            ()=>{\n                comments.forEach(comment => {\n                    comment.createdAt= new Date(comment.createdAt+'Z')\n                })\n                this.comments = comments\n            }\n            )\n        })\n        this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n            runInAction(\n                ()=> {\n                    comment.createdAt= new Date(comment.createdAt)\n                    this.comments.unshift(comment)}\n            )\n        })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error=>console.log(\"Error stopping connection: \", error))\n    }\n\n    clearComments = () => {\n        this.comments = []\n        this.stopHubConnection()\n    }\n\n    addComment = async (values: any) =>  {\n        values.activityId = store.activityStore.selectedActivity?.id\n        try{\n            await this.hubConnection?.invoke('SendComment', values)\n        }\n        catch(error){\n            console.log(error)\n        }\n    }\n}","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link, NavLink } from 'react-router-dom'\nimport { Menu,Container, Button,Image, Dropdown } from 'semantic-ui-react'\nimport { useStore } from '../stores/store'\n\nexport default observer(function NavBar() {\n    const {userStore: {user, logout}} = useStore()\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n            <Menu.Item as={NavLink} exact to='/' header>\n                <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight:'10px'}} />\n                Reactivities\n            </Menu.Item>\n            <Menu.Item as={NavLink} to='/activities' name=\"Activities\"/>\n            <Menu.Item>\n                <Button as={NavLink} to='/createActivity' positive content=\"Create activity\" />\n            </Menu.Item>\n            <Menu.Item position='right'>\n                <Image as={Link} to={`/profiles/${user?.username}`} src={user?.image || '/assets/user.png'} avatar spaced='right'/>\n                <Dropdown pointing='top left' text={user?.displayName}>\n                    <Dropdown.Menu>\n                        <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                        <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate} } = useStore()\n    return(\n        <>\n        <Menu vertical size='large' style={{width:'100%', marginTop: 26}}>\n            <Header icon='filter' attached color='teal' content='Filters'/>\n            <Menu.Item \n                content='All Activities'\n                active={predicate.has('all')}\n                onClick={()=> setPredicate('all','true')}\n            />\n            <Menu.Item\n            content=\"I'm going\"\n            active={predicate.has('isGoing')}\n            onClick={()=> setPredicate('isGoing','true')}\n            />\n            <Menu.Item \n            content=\"I'm hosting\"\n            active={predicate.has('isHost')}\n            onClick={()=> setPredicate('isHost','true')}\n            />\n        </Menu>\n        <Header />\n        <Calendar\n        onChange={(date)=> setPredicate('startDate', date as Date)}\n        value={predicate.get('startDate' || new Date())}\n        />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n\n    const {profileStore, userStore} = useStore()\n    const {updateFollowing, loading} = profileStore\n\n    if(userStore.user?.username === profile.username) return null\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault()\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\n    }\n\n    return(\n        \n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button color='teal' fluid content={profile.following ? 'Following' : 'Not following'}/>\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                color={profile.following ? 'red' : 'green'} \n                fluid \n                basic\n                content={profile.following ? 'Unfollow' : 'Follow'}\n                loading={loading}\n                onClick={(e) => handleFollow(e,profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from \"mobx-react-lite\"\nimport { Card, Image,Icon } from \"semantic-ui-react\"\nimport { Profile } from \"../../app/models/profile\"\nimport React from 'react'\nimport { Link } from \"react-router-dom\"\nimport FollowButton from \"./FollowButton\"\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileCrad({profile}: Props) {\n\n    function truncate(str: string | undefined) {\n        if(str) {\n            return str.length > 40 ? str.substring(0,37)+'...' : str\n        }\n    }\n\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'}/>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    ) \n})"," import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { List, Image, Popup } from 'semantic-ui-react'\nimport { Profile } from '../../../app/models/profile'\nimport ProfileCard from '../../profiles/ProfileCard'\n\ninterface Props {\n    attendees: Profile[]\n}\n\n export default observer(function ActivityListItemAttendee({attendees}: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return(\n        <List horizontal>\n            {\n                attendees.map(attendee=>\n                    <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                    <Image \n                    size='mini'\n                    circular\n                    src={attendee.image || '/assets/user.png'}\n                    bordered\n                    style={attendee.following ? styles : null}\n                    />\n                    </List.Item>\n                    }\n                    >\n                        <Popup.Content>\n                            <ProfileCard profile = {attendee} />\n                        </Popup.Content>\n                    </Popup>\n                )\n            }\n        </List>\n    )\n })","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Icon, Item, Label, Popup, Segment } from 'semantic-ui-react'\nimport { Activity } from '../../../app/models/activity'\nimport {format} from 'date-fns'\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\nimport { act } from 'react-dom/test-utils'\nimport ProfileCard from '../../profiles/ProfileCard'\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({activity}: Props) {\n    return(\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && (\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign: 'center'}} />\n                )}\n                <Item.Group>\n                    <Item>\n                        <Popup\n                        trigger={\n                        <Item.Image\n                        as={Link}\n                        to={`/profiles/${activity.hostUsername}`}\n                        style={{marginBottom: 3}} \n                        size='tiny' \n                        circular\n                        src={activity.host?.image || '/assets/user.png'}\n                        />}\n                        >\n                            <Popup.Content>\n                            <ProfileCard profile = {activity.host!} />\n                            </Popup.Content>\n                        </Popup>\n                        <Item.Content>\n                            <Item.Header \n                            as={Link} \n                            to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                                {\n                                    activity.isHost && (\n                                        <Item.Description>\n                                            <Label\n                                            basic\n                                            color='orange'\n                                            >\n                                                You are hosting this activity\n                                            </Label>\n                                        </Item.Description>\n                                    )\n                                }\n                                {\n                                    activity.isGoing && !activity.isHost && (\n                                        <Item.Description>\n                                            <Label\n                                            basic\n                                            color='green'\n                                            >\n                                                You are going to this activity\n                                            </Label>\n                                        </Item.Description>\n                                    )\n                                }\n                            </Item.Description>\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                <Icon name='clock'/> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                <Icon name='marker'/> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                as={Link}\n                to={`/activities/${activity.id}`}\n                color='teal'\n                floated='right'\n                content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react' \nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const {activityStore} = useStore()\n    const {groupedActivities} = activityStore\n\n    \n    return(\n        <>\n        {groupedActivities.map(([group, activities])=>\n        <Fragment key={group}>\n            <Header sub color='teal'>\n                {group}\n            </Header>\n                {activities.map((activity)=> (\n                <ActivityListItem key={activity.id} activity={activity} />   \n                ))}\n        </Fragment>\n        )}\n        </>\n    )\n}\n)","import React, { Fragment } from 'react'\nimport { Segment, Button, Placeholder } from 'semantic-ui-react'\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    )\n}\n","import { observer } from 'mobx-react-lite'\nimport React, { useEffect, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { Grid, Loader } from 'semantic-ui-react'\nimport { PagingParams } from '../../../app/models/pagination'\nimport { useStore } from '../../../app/stores/store'\nimport ActivityFilters from './ActivityFilters'\nimport ActivityList from './ActivityList'\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder'\n\nexport default observer(function ActivityDashboard() {\n\n    const {activityStore} = useStore()\n    const {loadActivities, activityRegistry, pagination, setPagingParams} = activityStore\n    const [loadingNext, setLoadingNext] = useState(false)\n\n    function handleGetNext() {\n        setLoadingNext(true)\n        setPagingParams(new PagingParams(pagination!.currentPage+1))\n        loadActivities().then(()=> setLoadingNext(false))\n    }\n\n\n    useEffect(()=>{\n        if(activityRegistry.size <= 1) loadActivities()},[activityRegistry.size, loadActivities])\n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ?(\n                    <>\n                    <ActivityListItemPlaceholder />\n                    <ActivityListItemPlaceholder />\n                    </>\n                ) : \n                (\n                    <InfiniteScroll\n                    pageStart={0}\n                    loadMore={handleGetNext}\n                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                    initialLoad={false}\n                    >\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )\n                }\n            </Grid.Column>\n            <Grid.Column width='6'>\n                < ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width='10'>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n)\n","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header, Label } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore()\n    const {login} = userStore\n\n    return(\n        <Formik\n        initialValues={{email:'', password:'', error: null}}\n        onSubmit={(values,{setErrors})=> login(values).catch(error=> \n        setErrors({error: 'Invalid email or password'}))}>\n            {({handleSubmit, isSubmitting, errors})=> (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                <Header as='h2' color='teal' textAlign='center' content='Login to Reactivities' />\n                <MyTextInput name='email' placeholder='Email' />\n                <MyTextInput name= 'password' placeholder='Password' type='password' />\n                <ErrorMessage name='error'>\n                    {() =>\n                    (<Label style={{marginBottom: 10}} basic color='red' content={errors.error}\n                    />\n                    )}\n                </ErrorMessage>\n                <Button loading={isSubmitting} positive type='submit' fluid content='login' />\n            </Form>\n            )}    \n        </Formik>\n    )\n})\n","import React from 'react'\nimport { Message } from 'semantic-ui-react'\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return(\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any)=>(\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport ValidationErrors from '../errors/ValidationErrors'\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore()\n    const {register} = userStore\n\n    return(\n        <Formik\n        initialValues={{displayName: '', username: '', email:'', password:'', error: null}}\n        validationSchema={Yup.object(\n            {\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            }\n        )}\n        onSubmit={(values,{setErrors})=> register(values).catch(error=> \n        setErrors({error}))}>\n            {({handleSubmit, isSubmitting, errors, isValid, dirty})=> (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                <Header as='h2' color='teal' textAlign='center' content='Sign up to Reactivities' />\n                <MyTextInput name='displayName' placeholder='Display Name' />\n                <MyTextInput name='username' placeholder=' Username' />\n                <MyTextInput name='email' placeholder='Email' />\n                <MyTextInput name= 'password' placeholder='Password' type='password' />\n                <ErrorMessage name='error'>\n                    {() =>\n                    (<ValidationErrors errors={errors.error} />\n                    )}\n                </ErrorMessage>\n                <Button disabled={!isValid || ! dirty || isSubmitting} \n                loading={isSubmitting} positive type='submit' fluid content='Register' />\n            </Form>\n            )}    \n        </Formik>\n    )\n})\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Container, Divider, Header, Image, Segment } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport LoginForm from '../users/LoginForm'\nimport RegisterForm from '../users/RegisterForm'\n\nexport default observer(function HomePage() {\n    const {userStore, modalStore} = useStore()\n    const {isLoggedIn} = userStore\n    return(\n        <Segment inverted textAlign='center' className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image alt='logo' size='massive' src='/assets/logo.png' style={{marginBotton: 12}}/>\n                    Reactivities\n                </Header>\n                {isLoggedIn ? \n                (\n                <>\n                <Header inverted as='h2' content=\"Welcome to Reactivities\"/>\n                <Button as={Link} to='/activities' size='huge' inverted>\n                    Take me to Activities!\n                </Button>\n                </>\n                ) :\n                (\n                <>\n                <Button onClick={()=> modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                Login\n                </Button> \n                <Button onClick={()=> modalStore.openModal(<RegisterForm /> )} size='huge' inverted>\n                Register\n                </Button>\n                <Divider horizontal inverted>Or</Divider>\n                <Button loading={userStore.fbLoading} onClick={userStore.facebookLogin} size='huge' inverted color='facebook'>\n                Login with Facebook\n                </Button> \n                </>\n                )}\n            </Container>\n        </Segment>\n    )\n})","import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\ninterface Props {\n    inverted?: boolean;\n    content?: string\n}\n\nexport default function LoadingComponents({inverted= true, content= 'Loading...'}: Props) {\n    return(\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label, Select } from 'semantic-ui-react'\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    options: any;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n            clearable\n            options={props.options}\n            value={field.value || null}\n            onChange={(e,d)=> helpers.setValue(d.value)}\n            onBlur={()=> helpers.setTouched(true)}\n            placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik'\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react'\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker'\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!)\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n            {...field}\n            {...props}\n            selected={(field.value && new Date(field.value)) || null}\n            onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { observer } from 'mobx-react-lite'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useHistory, useParams } from 'react-router-dom'\nimport { Button, Header, Segment } from 'semantic-ui-react'\nimport LoadingComponents from '../../../app/layout/LoadingComponents'\nimport { useStore } from '../../../app/stores/store'\nimport { Formik, Form } from 'formik'\nimport * as Yup from 'yup'\nimport MyTextInput from '../../../app/common/form/MyTextInput'\nimport MyTextArea from '../../../app/common/form/MyTextArea'\nimport MySelectInput from '../../../app/common/form/MySelectInput'\nimport MyDateInput from '../../../app/common/form/MyDateInput'\nimport { categoryOptions } from '../../../app/common/options/categoryOptions'\nimport { Activity, ActivityFormValues } from '../../../app/models/activity'\nimport { v4 as uuid } from 'uuid';\n\nexport default observer(function ActivityForm() {\n    const history = useHistory()\n    const {activityStore} = useStore()\n    const {loadActivity, loading, loadingInitial, createActivity, updateActivity} = activityStore\n    const {id} = useParams<{id: string}>()\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues())\n\n    const validationSchema= Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    })\n\n    useEffect(()=> {\n         if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))},[id, loadActivity])\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if(!activity.id) { \n            let newActivity = {\n                ...activity, \n                id: uuid()\n            }\n            createActivity(newActivity).then(()=> history.push(`/activities/${newActivity.id}`))\n            } else {\n                updateActivity(activity).then(()=>history.push(`/activities/${activity.id}`))\n            }\n    }\n    \n    if(loadingInitial) return <LoadingComponents content='Loading activity...' />\n\n    return(\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik\n            enableReinitialize\n            initialValues={activity}\n            validationSchema={validationSchema}\n            onSubmit={values => handleFormSubmit(values)}>\n            {({values: dirty, isSubmitting, handleSubmit, isValid}) => (\n            <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\n                <MyTextInput name='title' placeholder='title' />\n                <MyTextArea rows={3} placeholder='Description' name=\"description\" />\n                <MySelectInput options={categoryOptions} placeholder='Category' name=\"category\" />\n                <MyDateInput\n                placeholderText='Date'\n                name=\"date\"\n                showTimeSelect\n                timeCaption='time'\n                dateFormat='MMMM d, yyyy h:mm aa'\n                />\n                <Header content='Location Details' sub color='teal'/>\n                <MyTextInput placeholder='City' name=\"city\" />\n                <MyTextInput placeholder='Venue' name=\"venue\" />\n                <Button disabled={!dirty || isSubmitting || !isValid}\n                loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\n                <Button as={Link} to='/activities' floated='right'  type='button' content='Cancel' />\n            </Form>\n            )}\n            </Formik>\n        </Segment>\n    )\n}\n)\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n}\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n}\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore()\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding : '0'}}>\n                {activity.isCancelled && (\n                    <Label style={{postition: 'absolute', zIndex: 1000, left: -14, top: 20\n                    }} content='Cancelled' ribbon color='red' \n                    />\n                )}\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!,'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>\n                                    {activity.host?.displayName}\n                                    </Link>\n                                    </strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {\n                    activity.isHost ? (     \n                    <>\n                    <Button color={activity.isCancelled ? 'green' : 'red'}\n                    floated='left'\n                    basic\n                    content={activity.isCancelled ? 'Re-activate activity' : 'Cancel activity'}\n                    onClick={cancelActivityToggle}\n                    loading={loading }\n                    />\n                    <Button\n                    disabled={activity.isCancelled} \n                    as={Link} to={`/manage/${activity.id}`} \n                    color='orange' floated='right'\n                    >\n                    Manage Event\n                    </Button>\n                    </>\n                    ) :\n                    activity.isGoing ? \n                    (<Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>) :\n                    (<Button disabled={activity.isCancelled} \n                        loading={loading} \n                        onClick={updateAttendance} \n                        color='teal'>\n                        Join Activity\n                        </Button>)\n                    }    \n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Button, Loader} from 'semantic-ui-react'\nimport MyTextArea from '../../../app/common/form/MyTextArea'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { relative } from 'path'\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n    const {commentStore} = useStore()\n\n    useEffect(()=> {\n        if(activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n        return ()=> commentStore.clearComments()\n    },[commentStore, activityId])\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n            <Formik\n                    onSubmit={(values, {resetForm})=> commentStore.addComment(values)\n                    .then(()=> resetForm())}\n                    initialValues={{body: ''}}\n                    validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        }\n                    )}\n                    >\n                        {({isSubmitting, isValid, handleSubmit})=>(\n                             <Form className='ui form'>\n                                <Field\n                                name='body'\n                                >\n                                   {(props: FieldProps)=>(\n                                       <div style={{position: 'relative'}}>\n                                           <Loader active={isSubmitting}/>\n                                           <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + Enter to start a new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e=>{\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return\n                                                } else if(e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault()\n                                                    isValid && handleSubmit()\n                                                }\n                                            }}\n                                            />\n                                       </div>\n                                   )} \n                                </Field>\n                            </Form>\n                        )}\n                    </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment=>(\n                        <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author \n                            as={Link}\n                            to={`/profiles/${comment.username}`}\n                            >{comment.displayName}</Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                        </Comment.Content>\n                    </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'person' : 'people'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee =>\n                        (\n                            <Item style={{ position: 'relative' }} key={attendee.username}>\n                                {attendee.username === host?.username &&\n                                (\n                                    <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                    >\n                                    Host\n                                    </Label>\n                                )\n                                }\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                                </Item.Content>\n                            </Item>\n                        ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import React, { useEffect } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react'\nimport LoadingComponents from '../../../app/layout/LoadingComponents';\nimport { useStore } from '../../../app/stores/store'\nimport ActivityDetailedsHeader from './ActivityDetailedHeader';\nimport ActivityDetailedsInfo from './ActivityDetailedInfo';\nimport ActivityDetailedsChat from './ActivityDetailedChat';\nimport ActivityDetailedsSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity,loadActivity, loadingInitial, clearSelectedActivity} = activityStore\n    const {id} =  useParams<{id: string}>()\n\n    useEffect(()=>{\n      if (id) {\n        loadActivity(id)\n      }\n      return ()=>clearSelectedActivity()\n    }, [id, loadActivity,clearSelectedActivity])\n\n    if (loadingInitial || !activity) return <LoadingComponents />\n    \n    return(\n      <Grid>\n        <Grid.Column width={10}>\n          <ActivityDetailedsHeader activity={activity}/>\n          <ActivityDetailedsInfo activity={activity}/>\n          <ActivityDetailedsChat activityId={activity.id}/>\n        </Grid.Column>\n        <Grid.Column width={6}>\n          <ActivityDetailedsSidebar activity={activity!}/>\n        </Grid.Column>\n      </Grid>\n  )\n}\n)","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null)\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n            <ValidationErrors errors={errors} />}\n        </>\n    )\n}","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\n\nexport default function NotFound() {\n    return(\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                    Oops - we've looked everywhere and could not find this\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React from 'react' \nimport { Container, Header, Segment } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore()\n\n    return(\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n            <Segment>\n            <Header as='h4' content='Stack trace' color='teal' />\n            <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n            </Segment>}\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Modal } from 'semantic-ui-react'\nimport { useStore } from '../../stores/store'\n\nexport default observer(function ModalContainer() {\n\n    const {modalStore } = useStore()\n    const {modal,closeModal} = modalStore\n\n    return(\n        <Modal open={modal.open} onClose={closeModal} size='mini' >\n            <Modal.Content>\n                {modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n\n})","import { Formik,Form } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport MyTextArea from '../../app/common/form/MyTextArea'\nimport { Button } from 'semantic-ui-react'\n\n\ninterface Props {\n    setEditMode: (editMode: boolean)=> void\n}\n\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\n\n    const {profileStore: {profile, updateProfile} } = useStore()\n    return(\n        <Formik\n        initialValues ={{displayName: profile?.displayName, bio: profile?.bio}}\n        onSubmit={values=> {\n            updateProfile(values).then(()=>setEditMode(false))\n        }}\n        validationSchema={Yup.object({\n            displayName: Yup.string().required()\n        })}\n        >\n            {({isSubmitting,isValid, dirty}) => (\n                <Form className=\"ui form\">\n                    <MyTextInput placeholder='Display Name' name='displayName'/>\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio'/>\n                    <Button\n                    positivie\n                    type='submit'\n                    loading={isSubmitting}\n                    content='Update profile'\n                    floated='right'\n                    disabled={!isValid || !dirty}\n                    />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React, { useState } from 'react'\nimport { Button, Grid, Header,Tab } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport ProfileEditForm from './ProfileEditForm'\n\nexport default function ProfileAbout() {\n\n    const {profileStore: {isCurrentUser, profile}} = useStore()\n    const [editMode, setEditMode] = useState(false)\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                        floated='right'\n                        basic\n                        content={editMode ? 'Cancel' : 'Edit Profile'}\n                        onClick={()=>setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode = {setEditMode} /> :\n                    <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Grid, Header, Image, Tab, TabProps } from 'semantic-ui-react'\nimport { UserActivity } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\nimport { format } from 'date-fns'\n\nconst panes = [\n    {menuItem: 'Future Events', pane: { key: 'future' }},\n    {menuItem: 'Past Events', pane: { key: 'past' }},\n    {menuItem: 'Hosting', pane: { key: 'hosting' }},\n]\n\nexport default observer(function ProfileActivities() {\n    const {profileStore: {loadUserActivities, profile, loadingActivities, userActivities}} = useStore()\n\n    useEffect(()=>{\n        loadUserActivities(profile!.username)\n    },[loadUserActivities, profile])\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\n    }\n\n    return(\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'}/>\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                    panes={panes}\n                    menu={{secondary: true, pointing: true}}\n                    onTabChange={(e,data)=> {\n                        console.log(data)\n                        handleTabChange(e,data)}}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity)=>\n                        <Card\n                        as={Link}\n                        to={`/activities/${activity.id}`}\n                        key={activity.id}\n                        >\n                            <Image \n                            src={`/assets/categoryImages/${activity.category}.jpg`}\n                            style={{minHeight: 100, objectFit: 'cover'}} />\n                            <Card.Content>\n                                <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                <Card.Meta textAlign='center'>\n                                    <div>{format(new Date(activity.date),'do LLL')}</div>\n                                    <div>{format(new Date(activity.date),'h:mm a')}</div>\n                                </Card.Meta>\n                            </Card.Content>\n                        </Card>\n                        )}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react'\nimport { useStore } from '../../app/stores/store'\nimport ProfileCard from './ProfileCard'\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore()\n    const {profile, followings, loadingFollowings, activeTab} = profileStore\n\n\n    return(\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column  width={16}>\n                    <Header \n                    floated='left' \n                    icon='user' \n                    content={activeTab === 3 ? `People following ${profile?.displayName}` :\n                    `People ${profile?.displayName} is following` }\n                    />\n                </Grid.Column>\n                <Grid.Column width={16} >\n                    <Card.Group itemsPerRow={4} >\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n  setFiles: (files: any)=> void\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n  \n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200\n  }\n\n  const dzActive = {\n    borderColor: 'green'\n  }\n  const onDrop = useCallback((acceptedFiles) => {\n     setFiles(acceptedFiles.map((file: any)=> Object.assign(file, {preview: URL.createObjectURL(file)})))\n  }, [setFiles])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop image here' />\n    </div>\n  )\n}","import React from 'react'\nimport { Cropper } from 'react-cropper'\nimport 'cropperjs/dist/cropper.css' \n\ninterface Props {\n    setCropper: (cropper: Cropper) => void,\n    imagePreview: string\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) { \n    return(\n        <Cropper\n        src={imagePreview}\n        style={{height: 200, width:'100%'}}\n        initialAspectRatio={1}\n        aspectRatio={1}\n        preview='.img-preview'\n        guides={false}\n        viewMode={1}\n        autoCropArea={1}\n        background={false}\n        onInitialized={cropper=> setCropper(cropper)}\n        />\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Grid, Header } from 'semantic-ui-react'\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\nimport PhotoWidgetCropper from './PhotoWidgetCropper'\n\ninterface Props {\n    loading: boolean,\n    uploadPhoto: (file: Blob) => void\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([])\n    const [cropper, setCropper] = useState<Cropper>()\n\n    ///for debugging\n    //console.log(files)\n    function onCrop() {\n        if(cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(()=>{\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    },[files])\n\n    return(\n\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 &&\n                (\n                    <PhotoWidgetCropper\n                    setCropper={setCropper}\n                    imagePreview={files[0].preview}\n                    />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length> 0 && \n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\n                <Button.Group  widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                    <Button disbaled={loading} onClick={()=> setFiles([])} icon='close'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Card, Tab,Image,Header, Grid, Button } from 'semantic-ui-react'\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\nimport { Photo, Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({profile}: Props)\n{   const {profileStore: {isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto}} = useStore()\n    const [addPhotoMode, setAddPhotoMode] = useState(false)\n    const [target, setTarget] = useState('')\n    \n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(()=> setAddPhotoMode(false))\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        setMainPhoto(photo)\n    }\n\n    function handlePhotoDelete(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        deletePhoto(photo)\n    }\n\n    return(\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                <Header icon='image' content='Photos' floated='left'/>\n                {isCurrentUser && (\n                    <Button floated='right' \n                    basic \n                    content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                    onClick={()=> setAddPhotoMode(!addPhotoMode)}\n                    />\n                )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/> )\n                        :\n                        (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser &&\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                        basic\n                                        color='green'\n                                        content='Main'\n                                        name={'main' + photo.id}\n                                        disabled={photo.isMain}\n                                        onClick={e=>handleSetMainPhoto(photo,e)}\n                                        loading={target === 'main' + photo.id && loading}\n                                        />\n                                        <Button \n                                        basic\n                                        color='red'\n                                        icon='trash'\n                                        name={photo.id}\n                                        disabled={photo.isMain}\n                                        onClick={e=>handlePhotoDelete(photo,e)}\n                                        loading={target === photo.id && loading}\n                                        />\n                                    </Button.Group>}\n                                </Card>))}      \n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n            \n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\nimport ProfileAbout from './ProfileAbout'\nimport ProfileActivities from './ProfileActivities'\nimport ProfileFollowings from './ProfileFollowings'\nimport ProfilePhotos from './ProfilePhotos'\n\ninterface Props{\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore() \n\n    const panes = [\n    {menuItem: 'About', render: () => <ProfileAbout/>},\n    {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n    {menuItem: 'Events', render: () => <ProfileActivities />},\n    {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n    {menuItem: 'Following', render: () => <ProfileFollowings/>},\n]\n    return(\n        <Tab\n        menu={{fluid: true, vertical: true}}\n        menuPosition='right'\n        panes={panes}\n        onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Grid, Item, Segment,Header, Statistic, Divider, Reveal, Button } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport FollowButton from './FollowButton'\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileHeader({profile}: Props)\n{\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName}/>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                <Statistic.Group>\n                    <Statistic label='Followers' value={profile.followersCount}/>\n                    <Statistic label='Following' value={profile.followingCount}/>\n                </Statistic.Group>\n                <Divider />\n                <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Grid } from 'semantic-ui-react'\nimport LoadingComponents from '../../app/layout/LoadingComponents'\nimport { useStore } from '../../app/stores/store'\nimport ProfileContent from './ProfileContent'\nimport ProfileHeader from './ProfileHeader'\n\nexport default observer(function ProfilePage() \n{   const {username} = useParams<{username: string}>()\n    const {profileStore} = useStore()\n    const {profile,loadProfile, loadingProfile,setActiveTab} = profileStore\n\n    useEffect(()=>{\n        loadProfile(username)\n        return(()=> setActiveTab(0))\n    },[loadProfile,username, setActiveTab])\n\n    if(loadingProfile) return <LoadingComponents content=\"Loading profile\" />\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                    <ProfileHeader profile={profile}/>\n                    <ProfileContent profile={profile}/>\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\"\nimport { useStore } from \"../stores/store\"\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore()\n    return(\n        <Route {...rest}\n        render={(props)=> isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container} from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponents from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation()\n\n  const {commonStore, userStore} = useStore()\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setApploaded());\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setApploaded());\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponents content=\"Loading app\" />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage}/>\n      <Route\n      path={'/(.+)'}\n      render={\n        ()=>(\n          <>\n          <NavBar/>\n          <Container style={{marginTop: '7em'}}>\n            <Switch>\n            <PrivateRoute exact path='/activities/:id' component={ActivityDetails}/>\n            <PrivateRoute path='/activities' component={ActivityDashboard}/>\n            <PrivateRoute key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm}/>\n            <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n            <PrivateRoute path='/errors' component={TestErrors} />\n            <Route path='/server-error' component={ServerError} />\n            <Route component={NotFound} />\n            </Switch>\n          </Container> \n          </>\n        )\n      }\n      />  \n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport {createBrowserHistory} from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history = {history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}